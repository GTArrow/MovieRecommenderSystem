// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  age            Int?
  name           String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  preferences     UserPreference[]
  preferredGenres UserPreferredGenre[]
  sessions        Session[]
  searchHistory   SearchHistory[]
  accounts        Account[]

  @@map("user")
}

model UserPreference {
  userId        String
  liked_movie_id Int
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, liked_movie_id])
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  @@unique([token])
  @@map("session")
}

model UserPreferredGenre {
  userId    String
  genre_id  Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, genre_id])
}

model SearchHistory {
  id              Int       @id @default(autoincrement())
  userId          String
  search_movie_id Int
  searched_at     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String   @id
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

